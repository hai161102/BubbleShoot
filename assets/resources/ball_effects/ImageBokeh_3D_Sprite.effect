
CCEffect %{
techniques: 
  - passes: 
      - vert: sprite-vs:vert
        frag: sprite-fs:frag
        depthStencilState: 
          depthTest: false
          depthWrite: false
        blendState: 
          targets: 
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        rasterizerState: 
          cullMode: none
        properties: 
          alphaThreshold: 
            value: 0.5
          uSize: 
            value: 
              - 300.0
              - 300.0
          uRadius: 
            value: 0.8
}%
        
CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  out vec4 color;
  out vec2 uv0;
  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif
    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif
    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>
  in vec4 color;
  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform Constant {
		vec2 uSize;
		float uRadius;
	};
	uniform sampler2D uTex;

vec4 ImageBokeh_main(sampler2D Tex, vec2 UV, vec2 Size, float Radius) 
{
    vec3 acc = vec3(0.0);
    vec3 div = vec3(0.0);
    vec2 pixel = 1.0 / Size;
    float r = 1.0;
    vec2 vangle = vec2(0.0, Radius);
    mat2 rot = mat2(cos(2.39996323), sin(2.39996323), -sin(2.39996323), cos(2.39996323));

    for (int j = 0; j < 10; j++)
    {  
        r += 1. / r;
        vangle = rot * vangle;
        vec3 col = texture(Tex, UV + pixel * (r-1.) * vangle).xyz;
        col = col * col * 1.5;
    	vec3 bokeh = pow(col, vec3(9.0)) + 0.4;
    	acc += col * bokeh;
    	div += bokeh;
    }
    return vec4(acc / div, texture(Tex, UV).a);
}
    
  vec4 frag () {
     vec4 o = ImageBokeh_main(cc_spriteTexture, uv0, uSize, uRadius);
       o *= color;
     ALPHA_TEST(o);
     return o;
   }
 }%
